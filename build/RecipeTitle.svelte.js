import './RecipeTitle.svelte.css.proxy.js';
/* src/RecipeTitle.svelte generated by Svelte v3.59.2 */
import {
	SvelteComponentDev,
	add_location,
	append_dev,
	attr_dev,
	destroy_each,
	detach_dev,
	dispatch_dev,
	element,
	empty,
	init,
	insert_dev,
	noop,
	safe_not_equal,
	set_data_dev,
	space,
	text,
	validate_each_argument,
	validate_slots
} from "./_snowpack/pkg/svelte/internal.js";

const file = "src/RecipeTitle.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

// (10:0) {#if recipe}
function create_if_block(ctx) {
	let div;
	let span;
	let t0_value = /*recipe*/ ctx[0].name + "";
	let t0;
	let t1;
	let if_block = /*recipe*/ ctx[0].categories && create_if_block_1(ctx);

	const block = {
		c: function create() {
			div = element("div");
			span = element("span");
			t0 = text(t0_value);
			t1 = space();
			if (if_block) if_block.c();
			attr_dev(span, "class", "recipe-title svelte-1sb698d");
			add_location(span, file, 11, 4, 311);
			add_location(div, file, 10, 2, 301);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, span);
			append_dev(span, t0);
			append_dev(div, t1);
			if (if_block) if_block.m(div, null);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*recipe*/ 1 && t0_value !== (t0_value = /*recipe*/ ctx[0].name + "")) set_data_dev(t0, t0_value);

			if (/*recipe*/ ctx[0].categories) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(10:0) {#if recipe}",
		ctx
	});

	return block;
}

// (13:4) {#if recipe.categories}
function create_if_block_1(ctx) {
	let span;
	let each_value = /*recipe*/ ctx[0].categories;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			span = element("span");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(span, "class", "categories svelte-1sb698d");
			add_location(span, file, 13, 6, 393);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(span, null);
				}
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*recipe*/ 1) {
				each_value = /*recipe*/ ctx[0].categories;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(span, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(13:4) {#if recipe.categories}",
		ctx
	});

	return block;
}

// (15:8) {#each recipe.categories as category}
function create_each_block(ctx) {
	let span;
	let t_value = /*category*/ ctx[1] + "";
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(t_value);
			attr_dev(span, "class", "category svelte-1sb698d");
			add_location(span, file, 15, 10, 475);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*recipe*/ 1 && t_value !== (t_value = /*category*/ ctx[1] + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(15:8) {#each recipe.categories as category}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let if_block_anchor;
	let if_block = /*recipe*/ ctx[0] && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (/*recipe*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('RecipeTitle', slots, []);
	let { recipe } = $$props;

	$$self.$$.on_mount.push(function () {
		if (recipe === undefined && !('recipe' in $$props || $$self.$$.bound[$$self.$$.props['recipe']])) {
			console.warn("<RecipeTitle> was created without expected prop 'recipe'");
		}
	});

	const writable_props = ['recipe'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<RecipeTitle> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('recipe' in $$props) $$invalidate(0, recipe = $$props.recipe);
	};

	$$self.$capture_state = () => ({ recipe });

	$$self.$inject_state = $$props => {
		if ('recipe' in $$props) $$invalidate(0, recipe = $$props.recipe);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [recipe];
}

class RecipeTitle extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { recipe: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "RecipeTitle",
			options,
			id: create_fragment.name
		});
	}

	get recipe() {
		throw new Error("<RecipeTitle>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set recipe(value) {
		throw new Error("<RecipeTitle>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default RecipeTitle;