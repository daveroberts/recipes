/* src/App.svelte generated by Svelte v3.59.2 */
import {
	SvelteComponentDev,
	add_location,
	append_dev,
	attr_dev,
	create_component,
	destroy_component,
	detach_dev,
	dispatch_dev,
	element,
	init,
	insert_dev,
	mount_component,
	noop,
	safe_not_equal,
	space,
	transition_in,
	transition_out,
	validate_slots
} from "./_snowpack/pkg/svelte/internal.js";

import RecipeList from './RecipeList.svelte.js';
const file = "src/App.svelte";

function create_fragment(ctx) {
	let div;
	let header;
	let t;
	let recipelist;
	let current;
	recipelist = new RecipeList({ $$inline: true });

	const block = {
		c: function create() {
			div = element("div");
			header = element("header");
			t = space();
			create_component(recipelist.$$.fragment);
			attr_dev(header, "class", "App-header");
			add_location(header, file, 8, 2, 148);
			attr_dev(div, "class", "App");
			add_location(div, file, 7, 0, 128);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, header);
			append_dev(div, t);
			mount_component(recipelist, div, null);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(recipelist.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(recipelist.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(recipelist);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('App', slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ RecipeList });
	return [];
}

class App extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "App",
			options,
			id: create_fragment.name
		});
	}
}

export default App;