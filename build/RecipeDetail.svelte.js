/* src/RecipeDetail.svelte generated by Svelte v3.59.2 */
import {
	SvelteComponentDev,
	add_location,
	append_dev,
	attr_dev,
	destroy_each,
	detach_dev,
	dispatch_dev,
	element,
	empty,
	init,
	insert_dev,
	noop,
	safe_not_equal,
	set_data_dev,
	space,
	text,
	validate_each_argument,
	validate_slots
} from "./_snowpack/pkg/svelte/internal.js";

const file = "src/RecipeDetail.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[1] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

// (8:2) {#if recipe}
function create_if_block(ctx) {
	let t0;
	let t1;
	let t2;
	let each_1_anchor;
	let if_block0 = /*recipe*/ ctx[0].notes && create_if_block_6(ctx);
	let if_block1 = /*recipe*/ ctx[0].video && create_if_block_5(ctx);
	let if_block2 = /*recipe*/ ctx[0].link && create_if_block_4(ctx);
	let each_value = /*recipe*/ ctx[0].versions;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_dev(target, t2, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(target, anchor);
				}
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*recipe*/ ctx[0].notes) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_6(ctx);
					if_block0.c();
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*recipe*/ ctx[0].video) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_5(ctx);
					if_block1.c();
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*recipe*/ ctx[0].link) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_4(ctx);
					if_block2.c();
					if_block2.m(t2.parentNode, t2);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty & /*recipe*/ 1) {
				each_value = /*recipe*/ ctx[0].versions;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach_dev(t2);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(8:2) {#if recipe}",
		ctx
	});

	return block;
}

// (9:4) {#if recipe.notes}
function create_if_block_6(ctx) {
	let each_1_anchor;
	let each_value_3 = /*recipe*/ ctx[0].notes;
	validate_each_argument(each_value_3);
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(target, anchor);
				}
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*recipe*/ 1) {
				each_value_3 = /*recipe*/ ctx[0].notes;
				validate_each_argument(each_value_3);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_3.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(9:4) {#if recipe.notes}",
		ctx
	});

	return block;
}

// (10:6) {#each recipe.notes as note}
function create_each_block_3(ctx) {
	let div;
	let strong;
	let t0;
	let t1_value = /*note*/ ctx[10] + "";
	let t1;

	const block = {
		c: function create() {
			div = element("div");
			strong = element("strong");
			t0 = text("Note: ");
			t1 = text(t1_value);
			add_location(strong, file, 10, 13, 178);
			add_location(div, file, 10, 8, 173);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, strong);
			append_dev(strong, t0);
			append_dev(strong, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*recipe*/ 1 && t1_value !== (t1_value = /*note*/ ctx[10] + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_3.name,
		type: "each",
		source: "(10:6) {#each recipe.notes as note}",
		ctx
	});

	return block;
}

// (14:4) {#if recipe.video}
function create_if_block_5(ctx) {
	let div;
	let a;
	let t_value = /*recipe*/ ctx[0].video + "";
	let t;
	let a_href_value;

	const block = {
		c: function create() {
			div = element("div");
			a = element("a");
			t = text(t_value);
			attr_dev(a, "class", "external_link");
			attr_dev(a, "target", "_blank");
			attr_dev(a, "href", a_href_value = /*recipe*/ ctx[0].video);
			add_location(a, file, 13, 27, 265);
			add_location(div, file, 13, 22, 260);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, a);
			append_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*recipe*/ 1 && t_value !== (t_value = /*recipe*/ ctx[0].video + "")) set_data_dev(t, t_value);

			if (dirty & /*recipe*/ 1 && a_href_value !== (a_href_value = /*recipe*/ ctx[0].video)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(14:4) {#if recipe.video}",
		ctx
	});

	return block;
}

// (15:4) {#if recipe.link}
function create_if_block_4(ctx) {
	let div;
	let a;
	let t_value = /*recipe*/ ctx[0].link + "";
	let t;
	let a_href_value;

	const block = {
		c: function create() {
			div = element("div");
			a = element("a");
			t = text(t_value);
			attr_dev(a, "class", "external_link");
			attr_dev(a, "target", "_blank");
			attr_dev(a, "href", a_href_value = /*recipe*/ ctx[0].link);
			add_location(a, file, 14, 26, 382);
			add_location(div, file, 14, 21, 377);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, a);
			append_dev(a, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*recipe*/ 1 && t_value !== (t_value = /*recipe*/ ctx[0].link + "")) set_data_dev(t, t_value);

			if (dirty & /*recipe*/ 1 && a_href_value !== (a_href_value = /*recipe*/ ctx[0].link)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(15:4) {#if recipe.link}",
		ctx
	});

	return block;
}

// (17:6) {#if version.name}
function create_if_block_3(ctx) {
	let h3;
	let t_value = /*version*/ ctx[1].name + "";
	let t;

	const block = {
		c: function create() {
			h3 = element("h3");
			t = text(t_value);
			add_location(h3, file, 16, 24, 534);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h3, anchor);
			append_dev(h3, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*recipe*/ 1 && t_value !== (t_value = /*version*/ ctx[1].name + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(17:6) {#if version.name}",
		ctx
	});

	return block;
}

// (18:6) {#if version.ingredients}
function create_if_block_2(ctx) {
	let h4;
	let t1;
	let ul;
	let each_value_2 = /*version*/ ctx[1].ingredients;
	validate_each_argument(each_value_2);
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const block = {
		c: function create() {
			h4 = element("h4");
			h4.textContent = "Ingredients";
			t1 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			add_location(h4, file, 18, 8, 603);
			add_location(ul, file, 19, 8, 632);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h4, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(ul, null);
				}
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*recipe*/ 1) {
				each_value_2 = /*version*/ ctx[1].ingredients;
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h4);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(18:6) {#if version.ingredients}",
		ctx
	});

	return block;
}

// (21:10) {#each version.ingredients as ingredient}
function create_each_block_2(ctx) {
	let li;
	let t_value = /*ingredient*/ ctx[7] + "";
	let t;

	const block = {
		c: function create() {
			li = element("li");
			t = text(t_value);
			add_location(li, file, 21, 12, 701);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*recipe*/ 1 && t_value !== (t_value = /*ingredient*/ ctx[7] + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(21:10) {#each version.ingredients as ingredient}",
		ctx
	});

	return block;
}

// (26:6) {#if version.instructions}
function create_if_block_1(ctx) {
	let h4;
	let t1;
	let ol;
	let t2;
	let each_value_1 = /*version*/ ctx[1].instructions;
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			h4 = element("h4");
			h4.textContent = "Instructions";
			t1 = space();
			ol = element("ol");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			add_location(h4, file, 26, 8, 808);
			add_location(ol, file, 27, 8, 838);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h4, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, ol, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(ol, null);
				}
			}

			append_dev(ol, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*recipe*/ 1) {
				each_value_1 = /*version*/ ctx[1].instructions;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ol, t2);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h4);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(ol);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(26:6) {#if version.instructions}",
		ctx
	});

	return block;
}

// (29:10) {#each version.instructions as instruction}
function create_each_block_1(ctx) {
	let li;
	let t_value = /*instruction*/ ctx[4] + "";
	let t;

	const block = {
		c: function create() {
			li = element("li");
			t = text(t_value);
			add_location(li, file, 29, 12, 909);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*recipe*/ 1 && t_value !== (t_value = /*instruction*/ ctx[4] + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(29:10) {#each version.instructions as instruction}",
		ctx
	});

	return block;
}

// (16:4) {#each recipe.versions as version}
function create_each_block(ctx) {
	let t0;
	let t1;
	let if_block2_anchor;
	let if_block0 = /*version*/ ctx[1].name && create_if_block_3(ctx);
	let if_block1 = /*version*/ ctx[1].ingredients && create_if_block_2(ctx);
	let if_block2 = /*version*/ ctx[1].instructions && create_if_block_1(ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_dev(target, if_block2_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*version*/ ctx[1].name) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*version*/ ctx[1].ingredients) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*version*/ ctx[1].instructions) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_1(ctx);
					if_block2.c();
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach_dev(if_block2_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(16:4) {#each recipe.versions as version}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let if_block = /*recipe*/ ctx[0] && create_if_block(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block) if_block.c();
			add_location(div, file, 6, 0, 86);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
		},
		p: function update(ctx, [dirty]) {
			if (/*recipe*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('RecipeDetail', slots, []);
	let { recipe } = $$props;

	$$self.$$.on_mount.push(function () {
		if (recipe === undefined && !('recipe' in $$props || $$self.$$.bound[$$self.$$.props['recipe']])) {
			console.warn("<RecipeDetail> was created without expected prop 'recipe'");
		}
	});

	const writable_props = ['recipe'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<RecipeDetail> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('recipe' in $$props) $$invalidate(0, recipe = $$props.recipe);
	};

	$$self.$capture_state = () => ({ recipe });

	$$self.$inject_state = $$props => {
		if ('recipe' in $$props) $$invalidate(0, recipe = $$props.recipe);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [recipe];
}

class RecipeDetail extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { recipe: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "RecipeDetail",
			options,
			id: create_fragment.name
		});
	}

	get recipe() {
		throw new Error("<RecipeDetail>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set recipe(value) {
		throw new Error("<RecipeDetail>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default RecipeDetail;