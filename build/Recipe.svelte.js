import './Recipe.svelte.css.proxy.js';
/* src\Recipe.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from "./_snowpack/pkg/svelte/internal.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[3] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

// (11:2) {#if expanded}
function create_if_block(ctx) {
	let t0;
	let t1;
	let t2;
	let each_1_anchor;
	let if_block0 = /*recipe*/ ctx[0].notes && create_if_block_6(ctx);
	let if_block1 = /*recipe*/ ctx[0].video && create_if_block_5(ctx);
	let if_block2 = /*recipe*/ ctx[0].link && create_if_block_4(ctx);
	let each_value = /*recipe*/ ctx[0].versions;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, t2, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*recipe*/ ctx[0].notes) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_6(ctx);
					if_block0.c();
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*recipe*/ ctx[0].video) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_5(ctx);
					if_block1.c();
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*recipe*/ ctx[0].link) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_4(ctx);
					if_block2.c();
					if_block2.m(t2.parentNode, t2);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty & /*recipe*/ 1) {
				each_value = /*recipe*/ ctx[0].versions;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(t2);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (12:4) {#if recipe.notes}
function create_if_block_6(ctx) {
	let each_1_anchor;
	let each_value_3 = /*recipe*/ ctx[0].notes;
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*recipe*/ 1) {
				each_value_3 = /*recipe*/ ctx[0].notes;
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_3.length;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (13:6) {#each recipe.notes as note}
function create_each_block_3(ctx) {
	let div;
	let strong;
	let t0;
	let t1_value = /*note*/ ctx[12] + "";
	let t1;

	return {
		c() {
			div = element("div");
			strong = element("strong");
			t0 = text("Note: ");
			t1 = text(t1_value);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, strong);
			append(strong, t0);
			append(strong, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*recipe*/ 1 && t1_value !== (t1_value = /*note*/ ctx[12] + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (17:4) {#if recipe.video}
function create_if_block_5(ctx) {
	let div;
	let a;
	let t_value = /*recipe*/ ctx[0].video + "";
	let t;
	let a_href_value;

	return {
		c() {
			div = element("div");
			a = element("a");
			t = text(t_value);
			attr(a, "class", "external_link svelte-15oq5q4");
			attr(a, "target", "_blank");
			attr(a, "href", a_href_value = /*recipe*/ ctx[0].video);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, a);
			append(a, t);
		},
		p(ctx, dirty) {
			if (dirty & /*recipe*/ 1 && t_value !== (t_value = /*recipe*/ ctx[0].video + "")) set_data(t, t_value);

			if (dirty & /*recipe*/ 1 && a_href_value !== (a_href_value = /*recipe*/ ctx[0].video)) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (18:4) {#if recipe.link}
function create_if_block_4(ctx) {
	let div;
	let a;
	let t_value = /*recipe*/ ctx[0].link + "";
	let t;
	let a_href_value;

	return {
		c() {
			div = element("div");
			a = element("a");
			t = text(t_value);
			attr(a, "class", "external_link svelte-15oq5q4");
			attr(a, "target", "_blank");
			attr(a, "href", a_href_value = /*recipe*/ ctx[0].link);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, a);
			append(a, t);
		},
		p(ctx, dirty) {
			if (dirty & /*recipe*/ 1 && t_value !== (t_value = /*recipe*/ ctx[0].link + "")) set_data(t, t_value);

			if (dirty & /*recipe*/ 1 && a_href_value !== (a_href_value = /*recipe*/ ctx[0].link)) {
				attr(a, "href", a_href_value);
			}
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (20:6) {#if version.name}
function create_if_block_3(ctx) {
	let h3;
	let t_value = /*version*/ ctx[3].name + "";
	let t;

	return {
		c() {
			h3 = element("h3");
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, h3, anchor);
			append(h3, t);
		},
		p(ctx, dirty) {
			if (dirty & /*recipe*/ 1 && t_value !== (t_value = /*version*/ ctx[3].name + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(h3);
		}
	};
}

// (21:6) {#if version.ingredients}
function create_if_block_2(ctx) {
	let h4;
	let t1;
	let ul;
	let each_value_2 = /*version*/ ctx[3].ingredients;
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	return {
		c() {
			h4 = element("h4");
			h4.textContent = "Ingredients";
			t1 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}
		},
		m(target, anchor) {
			insert(target, h4, anchor);
			insert(target, t1, anchor);
			insert(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*recipe*/ 1) {
				each_value_2 = /*version*/ ctx[3].ingredients;
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d(detaching) {
			if (detaching) detach(h4);
			if (detaching) detach(t1);
			if (detaching) detach(ul);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (24:10) {#each version.ingredients as ingredient}
function create_each_block_2(ctx) {
	let li;
	let t_value = /*ingredient*/ ctx[9] + "";
	let t;

	return {
		c() {
			li = element("li");
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, t);
		},
		p(ctx, dirty) {
			if (dirty & /*recipe*/ 1 && t_value !== (t_value = /*ingredient*/ ctx[9] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

// (29:6) {#if version.instructions}
function create_if_block_1(ctx) {
	let h4;
	let t1;
	let ol;
	let t2;
	let each_value_1 = /*version*/ ctx[3].instructions;
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	return {
		c() {
			h4 = element("h4");
			h4.textContent = "Instructions";
			t1 = space();
			ol = element("ol");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
		},
		m(target, anchor) {
			insert(target, h4, anchor);
			insert(target, t1, anchor);
			insert(target, ol, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ol, null);
			}

			append(ol, t2);
		},
		p(ctx, dirty) {
			if (dirty & /*recipe*/ 1) {
				each_value_1 = /*version*/ ctx[3].instructions;
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ol, t2);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d(detaching) {
			if (detaching) detach(h4);
			if (detaching) detach(t1);
			if (detaching) detach(ol);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (32:10) {#each version.instructions as instruction}
function create_each_block_1(ctx) {
	let li;
	let t_value = /*instruction*/ ctx[6] + "";
	let t;

	return {
		c() {
			li = element("li");
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, t);
		},
		p(ctx, dirty) {
			if (dirty & /*recipe*/ 1 && t_value !== (t_value = /*instruction*/ ctx[6] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

// (19:4) {#each recipe.versions as version}
function create_each_block(ctx) {
	let t0;
	let t1;
	let if_block2_anchor;
	let if_block0 = /*version*/ ctx[3].name && create_if_block_3(ctx);
	let if_block1 = /*version*/ ctx[3].ingredients && create_if_block_2(ctx);
	let if_block2 = /*version*/ ctx[3].instructions && create_if_block_1(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert(target, if_block2_anchor, anchor);
		},
		p(ctx, dirty) {
			if (/*version*/ ctx[3].name) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*version*/ ctx[3].ingredients) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*version*/ ctx[3].instructions) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_1(ctx);
					if_block2.c();
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach(if_block2_anchor);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let h2;
	let span;
	let t0_value = /*recipe*/ ctx[0].name + "";
	let t0;
	let t1;
	let mounted;
	let dispose;
	let if_block = /*expanded*/ ctx[1] && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			h2 = element("h2");
			span = element("span");
			t0 = text(t0_value);
			t1 = space();
			if (if_block) if_block.c();
			attr(span, "class", "fakelink");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, h2);
			append(h2, span);
			append(span, t0);
			append(div, t1);
			if (if_block) if_block.m(div, null);

			if (!mounted) {
				dispose = listen(span, "click", /*click_handler*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*recipe*/ 1 && t0_value !== (t0_value = /*recipe*/ ctx[0].name + "")) set_data(t0, t0_value);

			if (/*expanded*/ ctx[1]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { recipe } = $$props;
	let expanded = false;

	const click_handler = () => {
		$$invalidate(1, expanded = !expanded);
	};

	$$self.$$set = $$props => {
		if ("recipe" in $$props) $$invalidate(0, recipe = $$props.recipe);
	};

	return [recipe, expanded, click_handler];
}

class Recipe extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { recipe: 0 });
	}
}

export default Recipe;