import './RecipeList.svelte.css.proxy.js';
/* src\RecipeList.svelte generated by Svelte v3.50.1 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	set_style,
	space,
	text,
	toggle_class
} from "./_snowpack/pkg/svelte/internal.js";

import all_recipes from './recipes.json.proxy.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

// (66:6) {#each categories as category}
function create_each_block_2(ctx) {
	let span1;
	let span0;
	let t0_value = /*category*/ ctx[12] + "";
	let t0;
	let button0;
	let button1;
	let t3;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[6](/*category*/ ctx[12]);
	}

	function click_handler_1() {
		return /*click_handler_1*/ ctx[7](/*category*/ ctx[12]);
	}

	return {
		c() {
			span1 = element("span");
			span0 = element("span");
			t0 = text(t0_value);
			button0 = element("button");
			button0.textContent = "In\n          ";
			button1 = element("button");
			button1.textContent = "Out";
			t3 = space();
			attr(span0, "class", "category_element category-name svelte-so1bbo");
			attr(button0, "class", "category_element category_button svelte-so1bbo");
			toggle_class(button0, "selected", /*filtered_categories*/ ctx[1].included.includes(/*category*/ ctx[12]));
			attr(button1, "class", "category_element category_button svelte-so1bbo");
			toggle_class(button1, "selected", /*filtered_categories*/ ctx[1].excluded.includes(/*category*/ ctx[12]));
			attr(span1, "class", "category-box svelte-so1bbo");
		},
		m(target, anchor) {
			insert(target, span1, anchor);
			append(span1, span0);
			append(span0, t0);
			append(span1, button0);
			append(span1, button1);
			append(span1, t3);

			if (!mounted) {
				dispose = [
					listen(button0, "click", click_handler),
					listen(button1, "click", click_handler_1)
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*filtered_categories, categories*/ 10) {
				toggle_class(button0, "selected", /*filtered_categories*/ ctx[1].included.includes(/*category*/ ctx[12]));
			}

			if (dirty & /*filtered_categories, categories*/ 10) {
				toggle_class(button1, "selected", /*filtered_categories*/ ctx[1].excluded.includes(/*category*/ ctx[12]));
			}
		},
		d(detaching) {
			if (detaching) detach(span1);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (100:2) {:else}
function create_else_block(ctx) {
	let div;
	let t0;
	let t1;
	let t2;

	return {
		c() {
			div = element("div");
			t0 = text("No recipes found with `");
			t1 = text(/*search*/ ctx[0]);
			t2 = text("`");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
			append(div, t2);
		},
		p(ctx, dirty) {
			if (dirty & /*search*/ 1) set_data(t1, /*search*/ ctx[0]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (85:2) {#if recipes.length > 0}
function create_if_block(ctx) {
	let each_1_anchor;
	let each_value = /*recipes*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*recipes, encodeURIComponent*/ 4) {
				each_value = /*recipes*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (91:8) {#if recipe.categories}
function create_if_block_1(ctx) {
	let span;
	let each_value_1 = /*recipe*/ ctx[9].categories;
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	return {
		c() {
			span = element("span");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(span, "class", "categories");
		},
		m(target, anchor) {
			insert(target, span, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(span, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*recipes*/ 4) {
				each_value_1 = /*recipe*/ ctx[9].categories;
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(span, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (93:12) {#each recipe.categories as category}
function create_each_block_1(ctx) {
	let span;
	let t_value = /*category*/ ctx[12] + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text(t_value);
			attr(span, "class", "category");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*recipes*/ 4 && t_value !== (t_value = /*category*/ ctx[12] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

// (86:4) {#each recipes as recipe}
function create_each_block(ctx) {
	let div;
	let a;
	let span;
	let t0_value = /*recipe*/ ctx[9].name + "";
	let t0;
	let a_href_value;
	let t1;
	let t2;
	let if_block = /*recipe*/ ctx[9].categories && create_if_block_1(ctx);

	return {
		c() {
			div = element("div");
			a = element("a");
			span = element("span");
			t0 = text(t0_value);
			t1 = space();
			if (if_block) if_block.c();
			t2 = space();
			attr(span, "class", "list-recipe-title svelte-so1bbo");
			attr(a, "class", "recipe-link svelte-so1bbo");
			attr(a, "href", a_href_value = `#/recipe/${encodeURIComponent(/*recipe*/ ctx[9].name)}`);
			set_style(div, "display", "flex");
			set_style(div, "align-items", "center");
			set_style(div, "column-gap", "10pt");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, a);
			append(a, span);
			append(span, t0);
			append(div, t1);
			if (if_block) if_block.m(div, null);
			append(div, t2);
		},
		p(ctx, dirty) {
			if (dirty & /*recipes*/ 4 && t0_value !== (t0_value = /*recipe*/ ctx[9].name + "")) set_data(t0, t0_value);

			if (dirty & /*recipes*/ 4 && a_href_value !== (a_href_value = `#/recipe/${encodeURIComponent(/*recipe*/ ctx[9].name)}`)) {
				attr(a, "href", a_href_value);
			}

			if (/*recipe*/ ctx[9].categories) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(div, t2);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
		}
	};
}

function create_fragment(ctx) {
	let div3;
	let h1;
	let t1;
	let div1;
	let div0;
	let t2;
	let div2;
	let input;
	let t3;
	let mounted;
	let dispose;
	let each_value_2 = /*categories*/ ctx[3];
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	function select_block_type(ctx, dirty) {
		if (/*recipes*/ ctx[2].length > 0) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			div3 = element("div");
			h1 = element("h1");
			h1.textContent = "Recipes";
			t1 = space();
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			div2 = element("div");
			input = element("input");
			t3 = space();
			if_block.c();
			attr(div1, "class", "category_area svelte-so1bbo");
			attr(input, "placeholder", "Search...");
			input.autofocus = true;
			attr(input, "class", "svelte-so1bbo");
			attr(div2, "class", "search-box svelte-so1bbo");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, h1);
			append(div3, t1);
			append(div3, div1);
			append(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			append(div3, t2);
			append(div3, div2);
			append(div2, input);
			set_input_value(input, /*search*/ ctx[0]);
			append(div3, t3);
			if_block.m(div3, null);
			input.focus();

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler*/ ctx[8]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*filtered_categories, categories, toggle_exclude, toggle_include*/ 58) {
				each_value_2 = /*categories*/ ctx[3];
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}

			if (dirty & /*search*/ 1 && input.value !== /*search*/ ctx[0]) {
				set_input_value(input, /*search*/ ctx[0]);
			}

			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div3, null);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div3);
			destroy_each(each_blocks, detaching);
			if_block.d();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let categories = all_recipes.map(r => r.categories).flat().filter((v, i, a) => a.indexOf(v) === i).filter(cat => !!cat);
	categories.sort((a, b) => a > b ? 1 : -1);
	let search = "";
	let filtered_categories = { included: [], excluded: [] };
	let recipes = all_recipes;

	const toggle_include = category => {
		$$invalidate(1, filtered_categories.excluded = filtered_categories.excluded.filter(c => c != category), filtered_categories);

		if (filtered_categories.included.includes(category)) {
			// was included, need to remove
			$$invalidate(1, filtered_categories.included = filtered_categories.included.filter(c => c != category), filtered_categories);
		} else {
			// was not included, need to add
			$$invalidate(1, filtered_categories.included = [...filtered_categories.included, category], filtered_categories);
		}
	};

	const toggle_exclude = category => {
		$$invalidate(1, filtered_categories.included = filtered_categories.included.filter(c => c != category), filtered_categories);

		if (filtered_categories.excluded.includes(category)) {
			// was excluded, need to remove
			$$invalidate(1, filtered_categories.excluded = filtered_categories.excluded.filter(c => c != category), filtered_categories);
		} else {
			// was not excluded, need to add
			$$invalidate(1, filtered_categories.excluded = [...filtered_categories.excluded, category], filtered_categories);
		}
	};

	const click_handler = category => {
		toggle_include(category);
	};

	const click_handler_1 = category => {
		toggle_exclude(category);
	};

	function input_input_handler() {
		search = this.value;
		$$invalidate(0, search);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*filtered_categories, recipes, search*/ 7) {
			$: {
				$$invalidate(2, recipes = all_recipes.slice());

				if (filtered_categories.included.length > 0) {
					$$invalidate(2, recipes = recipes.filter(r => {
						if (!r.categories) {
							return false;
						}

						let intersection = r.categories.filter(cat => filtered_categories.included.includes(cat));
						return intersection.length >= filtered_categories.included.length;
					}));
				}

				if (filtered_categories.excluded.length > 0) {
					$$invalidate(2, recipes = recipes.filter(r => {
						if (!r.categories) {
							return true;
						}

						let intersection = r.categories.filter(cat => filtered_categories.excluded.includes(cat));
						return intersection.length == 0;
					}));
				}

				if (search) {
					$$invalidate(2, recipes = recipes.filter(r => {
						return JSON.stringify(r).toLowerCase().includes(search.toLowerCase());
					}));
				}

				recipes.sort((a, b) => a.name > b.name ? 1 : -1);
			}
		}
	};

	return [
		search,
		filtered_categories,
		recipes,
		categories,
		toggle_include,
		toggle_exclude,
		click_handler,
		click_handler_1,
		input_input_handler
	];
}

class RecipeList extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default RecipeList;