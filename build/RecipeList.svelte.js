import './RecipeList.svelte.css.proxy.js';
/* src\RecipeList.svelte generated by Svelte v3.38.2 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	get_binding_group_value,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	safe_not_equal,
	set_data,
	set_input_value,
	space,
	text,
	transition_in,
	transition_out
} from "./_snowpack/pkg/svelte/internal.js";

import all_recipes from "./recipes.json.proxy.js";
import Recipe from "./Recipe.svelte.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

// (33:4) {#each categories as category}
function create_each_block_1(ctx) {
	let label;
	let input;
	let input_value_value;
	let t0;
	let t1_value = /*category*/ ctx[10] + "";
	let t1;
	let t2;
	let mounted;
	let dispose;

	return {
		c() {
			label = element("label");
			input = element("input");
			t0 = space();
			t1 = text(t1_value);
			t2 = space();
			attr(input, "type", "checkbox");
			input.__value = input_value_value = /*category*/ ctx[10];
			input.value = input.__value;
			/*$$binding_groups*/ ctx[5][0].push(input);
			attr(label, "class", "category_checkbox svelte-m61way");
		},
		m(target, anchor) {
			insert(target, label, anchor);
			append(label, input);
			input.checked = ~/*selected_categories*/ ctx[1].indexOf(input.__value);
			append(label, t0);
			append(label, t1);
			append(label, t2);

			if (!mounted) {
				dispose = listen(input, "change", /*input_change_handler*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*selected_categories*/ 2) {
				input.checked = ~/*selected_categories*/ ctx[1].indexOf(input.__value);
			}
		},
		d(detaching) {
			if (detaching) detach(label);
			/*$$binding_groups*/ ctx[5][0].splice(/*$$binding_groups*/ ctx[5][0].indexOf(input), 1);
			mounted = false;
			dispose();
		}
	};
}

// (41:2) {#if search}
function create_if_block_1(ctx) {
	let div;
	let t0;
	let t1;

	return {
		c() {
			div = element("div");
			t0 = text("Searching for ");
			t1 = text(/*search*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
		},
		p(ctx, dirty) {
			if (dirty & /*search*/ 1) set_data(t1, /*search*/ ctx[0]);
		},
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (47:2) {:else}
function create_else_block(ctx) {
	let div;
	let t0;
	let t1;
	let t2;

	return {
		c() {
			div = element("div");
			t0 = text("No recipes found with `");
			t1 = text(/*search*/ ctx[0]);
			t2 = text("`");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
			append(div, t2);
		},
		p(ctx, dirty) {
			if (dirty & /*search*/ 1) set_data(t1, /*search*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (43:2) {#if recipes.length > 0}
function create_if_block(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*recipes*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*recipes*/ 4) {
				each_value = /*recipes*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (44:4) {#each recipes as recipe}
function create_each_block(ctx) {
	let recipe;
	let current;
	recipe = new Recipe({ props: { recipe: /*recipe*/ ctx[7] } });

	return {
		c() {
			create_component(recipe.$$.fragment);
		},
		m(target, anchor) {
			mount_component(recipe, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const recipe_changes = {};
			if (dirty & /*recipes*/ 4) recipe_changes.recipe = /*recipe*/ ctx[7];
			recipe.$set(recipe_changes);
		},
		i(local) {
			if (current) return;
			transition_in(recipe.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(recipe.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(recipe, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div2;
	let div0;
	let t0;
	let div1;
	let t1;
	let input;
	let t2;
	let t3;
	let current_block_type_index;
	let if_block1;
	let current;
	let mounted;
	let dispose;
	let each_value_1 = /*categories*/ ctx[3];
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let if_block0 = /*search*/ ctx[0] && create_if_block_1(ctx);
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*recipes*/ ctx[2].length > 0) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			div2 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			div1 = element("div");
			t1 = text("Search: ");
			input = element("input");
			t2 = space();
			if (if_block0) if_block0.c();
			t3 = space();
			if_block1.c();
			attr(div0, "class", "category_area svelte-m61way");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			append(div2, t0);
			append(div2, div1);
			append(div1, t1);
			append(div1, input);
			set_input_value(input, /*search*/ ctx[0]);
			append(div2, t2);
			if (if_block0) if_block0.m(div2, null);
			append(div2, t3);
			if_blocks[current_block_type_index].m(div2, null);
			current = true;

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*categories, selected_categories*/ 10) {
				each_value_1 = /*categories*/ ctx[3];
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}

			if (dirty & /*search*/ 1 && input.value !== /*search*/ ctx[0]) {
				set_input_value(input, /*search*/ ctx[0]);
			}

			if (/*search*/ ctx[0]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(div2, t3);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block1 = if_blocks[current_block_type_index];

				if (!if_block1) {
					if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block1.c();
				} else {
					if_block1.p(ctx, dirty);
				}

				transition_in(if_block1, 1);
				if_block1.m(div2, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			destroy_each(each_blocks, detaching);
			if (if_block0) if_block0.d();
			if_blocks[current_block_type_index].d();
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let categories = all_recipes.map(r => r.categories).flat().filter((v, i, a) => a.indexOf(v) === i).filter(cat => !!cat);
	let search = "";
	let selected_categories = [];
	let recipes = all_recipes;
	const $$binding_groups = [[]];

	function input_change_handler() {
		selected_categories = get_binding_group_value($$binding_groups[0], this.__value, this.checked);
		$$invalidate(1, selected_categories);
	}

	function input_input_handler() {
		search = this.value;
		$$invalidate(0, search);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*selected_categories, recipes, search*/ 7) {
			$: {
				$$invalidate(2, recipes = all_recipes.slice());

				if (selected_categories.length > 0) {
					$$invalidate(2, recipes = recipes.filter(r => {
						if (!r.categories) {
							return false;
						}

						let intersection = r.categories.filter(cat => selected_categories.includes(cat));
						return intersection.length > 0;
					}));
				}

				if (search) {
					$$invalidate(2, recipes = recipes.filter(r => {
						return JSON.stringify(r).toLowerCase().includes(search);
					}));
				}

				recipes.sort((a, b) => a.name > b.name ? 1 : -1);
			}
		}
	};

	return [
		search,
		selected_categories,
		recipes,
		categories,
		input_change_handler,
		$$binding_groups,
		input_input_handler
	];
}

class RecipeList extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default RecipeList;