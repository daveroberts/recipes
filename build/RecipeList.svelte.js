import './RecipeList.svelte.css.proxy.js';
/* src/RecipeList.svelte generated by Svelte v3.59.2 */
import {
	SvelteComponentDev,
	add_location,
	append_dev,
	attr_dev,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach_dev,
	dispatch_dev,
	element,
	empty,
	group_outros,
	init,
	insert_dev,
	listen_dev,
	mount_component,
	noop,
	run_all,
	safe_not_equal,
	set_data_dev,
	set_input_value,
	set_style,
	space,
	text,
	toggle_class,
	transition_in,
	transition_out,
	validate_each_argument,
	validate_slots
} from "./_snowpack/pkg/svelte/internal.js";

import all_recipes from './recipes.json.proxy.js';
import Recipe from './Recipe.svelte.js';
const file = "src/RecipeList.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

// (62:6) {#each categories as category}
function create_each_block_1(ctx) {
	let div;
	let span;
	let t0_value = /*category*/ ctx[12] + "";
	let t0;
	let button0;
	let button1;
	let t3;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[6](/*category*/ ctx[12]);
	}

	function click_handler_1() {
		return /*click_handler_1*/ ctx[7](/*category*/ ctx[12]);
	}

	const block = {
		c: function create() {
			div = element("div");
			span = element("span");
			t0 = text(t0_value);
			button0 = element("button");
			button0.textContent = "In\n          ";
			button1 = element("button");
			button1.textContent = "Out";
			t3 = space();
			attr_dev(span, "class", "category_element category-name svelte-lkor4m");
			add_location(span, file, 63, 10, 2612);
			attr_dev(button0, "class", "category_element category_button svelte-lkor4m");
			toggle_class(button0, "selected", /*filtered_categories*/ ctx[1].included.includes(/*category*/ ctx[12]));
			add_location(button0, file, 63, 72, 2674);
			attr_dev(button1, "class", "category_element category_button svelte-lkor4m");
			toggle_class(button1, "selected", /*filtered_categories*/ ctx[1].excluded.includes(/*category*/ ctx[12]));
			add_location(button1, file, 68, 19, 2903);
			attr_dev(div, "class", "category_box svelte-lkor4m");
			add_location(div, file, 62, 8, 2575);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, span);
			append_dev(span, t0);
			append_dev(div, button0);
			append_dev(div, button1);
			append_dev(div, t3);

			if (!mounted) {
				dispose = [
					listen_dev(button0, "click", click_handler, false, false, false, false),
					listen_dev(button1, "click", click_handler_1, false, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*filtered_categories, categories*/ 10) {
				toggle_class(button0, "selected", /*filtered_categories*/ ctx[1].included.includes(/*category*/ ctx[12]));
			}

			if (dirty & /*filtered_categories, categories*/ 10) {
				toggle_class(button1, "selected", /*filtered_categories*/ ctx[1].excluded.includes(/*category*/ ctx[12]));
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(62:6) {#each categories as category}",
		ctx
	});

	return block;
}

// (85:2) {:else}
function create_else_block(ctx) {
	let div;
	let t0;
	let t1;
	let t2;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text("No recipes found with `");
			t1 = text(/*search*/ ctx[0]);
			t2 = text("`");
			add_location(div, file, 85, 4, 3411);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);
			append_dev(div, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*search*/ 1) set_data_dev(t1, /*search*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(85:2) {:else}",
		ctx
	});

	return block;
}

// (81:2) {#if recipes.length > 0}
function create_if_block(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*recipes*/ ctx[2];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(target, anchor);
				}
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*recipes*/ 4) {
				each_value = /*recipes*/ ctx[2];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(81:2) {#if recipes.length > 0}",
		ctx
	});

	return block;
}

// (82:4) {#each recipes as recipe}
function create_each_block(ctx) {
	let recipe;
	let current;

	recipe = new Recipe({
			props: { recipe: /*recipe*/ ctx[9] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(recipe.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(recipe, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const recipe_changes = {};
			if (dirty & /*recipes*/ 4) recipe_changes.recipe = /*recipe*/ ctx[9];
			recipe.$set(recipe_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(recipe.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(recipe.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(recipe, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(82:4) {#each recipes as recipe}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div3;
	let div1;
	let div0;
	let t0;
	let div2;
	let t1;
	let input;
	let t2;
	let current_block_type_index;
	let if_block;
	let current;
	let mounted;
	let dispose;
	let each_value_1 = /*categories*/ ctx[3];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*recipes*/ ctx[2].length > 0) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	const block = {
		c: function create() {
			div3 = element("div");
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			div2 = element("div");
			t1 = text("Search: ");
			input = element("input");
			t2 = space();
			if_block.c();
			add_location(div0, file, 60, 4, 2524);
			attr_dev(div1, "class", "category_area svelte-lkor4m");
			add_location(div1, file, 59, 2, 2492);
			set_style(input, "font-size", "18pt");
			add_location(input, file, 78, 40, 3225);
			set_style(div2, "font-size", "18pt");
			add_location(div2, file, 78, 2, 3187);
			add_location(div3, file, 58, 0, 2484);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div1);
			append_dev(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div0, null);
				}
			}

			append_dev(div3, t0);
			append_dev(div3, div2);
			append_dev(div2, t1);
			append_dev(div2, input);
			set_input_value(input, /*search*/ ctx[0]);
			append_dev(div3, t2);
			if_blocks[current_block_type_index].m(div3, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(input, "input", /*input_input_handler*/ ctx[8]);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*filtered_categories, categories, toggle_exclude, toggle_include*/ 58) {
				each_value_1 = /*categories*/ ctx[3];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div0, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}

			if (dirty & /*search*/ 1 && input.value !== /*search*/ ctx[0]) {
				set_input_value(input, /*search*/ ctx[0]);
			}

			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div3, null);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
			destroy_each(each_blocks, detaching);
			if_blocks[current_block_type_index].d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('RecipeList', slots, []);
	let categories = all_recipes.map(r => r.categories).flat().filter((v, i, a) => a.indexOf(v) === i).filter(cat => !!cat);
	categories.sort((a, b) => a > b ? 1 : -1);
	let search = "";
	let filtered_categories = { included: [], excluded: [] };
	let recipes = all_recipes;

	const toggle_include = category => {
		$$invalidate(1, filtered_categories.excluded = filtered_categories.excluded.filter(c => c != category), filtered_categories);

		if (filtered_categories.included.includes(category)) {
			// was included, need to remove
			$$invalidate(1, filtered_categories.included = filtered_categories.included.filter(c => c != category), filtered_categories);
		} else {
			// was not included, need to add
			$$invalidate(1, filtered_categories.included = [...filtered_categories.included, category], filtered_categories);
		}
	};

	const toggle_exclude = category => {
		$$invalidate(1, filtered_categories.included = filtered_categories.included.filter(c => c != category), filtered_categories);

		if (filtered_categories.excluded.includes(category)) {
			// was excluded, need to remove
			$$invalidate(1, filtered_categories.excluded = filtered_categories.excluded.filter(c => c != category), filtered_categories);
		} else {
			// was not excluded, need to add
			$$invalidate(1, filtered_categories.excluded = [...filtered_categories.excluded, category], filtered_categories);
		}
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<RecipeList> was created with unknown prop '${key}'`);
	});

	const click_handler = category => {
		toggle_include(category);
	};

	const click_handler_1 = category => {
		toggle_exclude(category);
	};

	function input_input_handler() {
		search = this.value;
		$$invalidate(0, search);
	}

	$$self.$capture_state = () => ({
		all_recipes,
		categories,
		Recipe,
		search,
		filtered_categories,
		recipes,
		toggle_include,
		toggle_exclude
	});

	$$self.$inject_state = $$props => {
		if ('categories' in $$props) $$invalidate(3, categories = $$props.categories);
		if ('search' in $$props) $$invalidate(0, search = $$props.search);
		if ('filtered_categories' in $$props) $$invalidate(1, filtered_categories = $$props.filtered_categories);
		if ('recipes' in $$props) $$invalidate(2, recipes = $$props.recipes);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*filtered_categories, recipes, search*/ 7) {
			$: {
				$$invalidate(2, recipes = all_recipes.slice());

				if (filtered_categories.included.length > 0) {
					$$invalidate(2, recipes = recipes.filter(r => {
						if (!r.categories) {
							return false;
						}

						let intersection = r.categories.filter(cat => filtered_categories.included.includes(cat));
						return intersection.length >= filtered_categories.included.length;
					}));
				}

				if (filtered_categories.excluded.length > 0) {
					$$invalidate(2, recipes = recipes.filter(r => {
						if (!r.categories) {
							return true;
						}

						let intersection = r.categories.filter(cat => filtered_categories.excluded.includes(cat));
						return intersection.length == 0;
					}));
				}

				if (search) {
					$$invalidate(2, recipes = recipes.filter(r => {
						return JSON.stringify(r).toLowerCase().includes(search.toLowerCase());
					}));
				}

				recipes.sort((a, b) => a.name > b.name ? 1 : -1);
			}
		}
	};

	return [
		search,
		filtered_categories,
		recipes,
		categories,
		toggle_include,
		toggle_exclude,
		click_handler,
		click_handler_1,
		input_input_handler
	];
}

class RecipeList extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "RecipeList",
			options,
			id: create_fragment.name
		});
	}
}

export default RecipeList;