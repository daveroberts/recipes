import './RecipeSingle.svelte.css.proxy.js';
/* src\RecipeSingle.svelte generated by Svelte v3.50.1 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	set_style,
	space,
	text,
	transition_in,
	transition_out
} from "./_snowpack/pkg/svelte/internal.js";

import RecipeDetail from './RecipeDetail.svelte.js';
import all_recipes from './recipes.json.proxy.js';
import { onMount as on_mount } from './_snowpack/pkg/svelte.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (22:2) {#if recipe}
function create_if_block(ctx) {
	let div;
	let span1;
	let span0;
	let t0_value = /*recipe*/ ctx[0].name + "";
	let t0;
	let t1;
	let t2;
	let recipedetail;
	let current;
	let if_block = /*recipe*/ ctx[0].categories && create_if_block_1(ctx);
	recipedetail = new RecipeDetail({ props: { recipe: /*recipe*/ ctx[0] } });

	return {
		c() {
			div = element("div");
			span1 = element("span");
			span0 = element("span");
			t0 = text(t0_value);
			t1 = space();
			if (if_block) if_block.c();
			t2 = space();
			create_component(recipedetail.$$.fragment);
			attr(span0, "class", "recipe-title svelte-1wpnrfy");
			set_style(span1, "display", "flex");
			set_style(span1, "align-items", "center");
			set_style(span1, "column-gap", "10pt");
			set_style(div, "margin", "2em 0");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span1);
			append(span1, span0);
			append(span0, t0);
			append(span1, t1);
			if (if_block) if_block.m(span1, null);
			insert(target, t2, anchor);
			mount_component(recipedetail, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*recipe*/ 1) && t0_value !== (t0_value = /*recipe*/ ctx[0].name + "")) set_data(t0, t0_value);

			if (/*recipe*/ ctx[0].categories) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(span1, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			const recipedetail_changes = {};
			if (dirty & /*recipe*/ 1) recipedetail_changes.recipe = /*recipe*/ ctx[0];
			recipedetail.$set(recipedetail_changes);
		},
		i(local) {
			if (current) return;
			transition_in(recipedetail.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(recipedetail.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			if (detaching) detach(t2);
			destroy_component(recipedetail, detaching);
		}
	};
}

// (26:8) {#if recipe.categories}
function create_if_block_1(ctx) {
	let span;
	let each_value = /*recipe*/ ctx[0].categories;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			span = element("span");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(span, "class", "categories");
		},
		m(target, anchor) {
			insert(target, span, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(span, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*recipe*/ 1) {
				each_value = /*recipe*/ ctx[0].categories;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(span, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			if (detaching) detach(span);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (28:12) {#each recipe.categories as category}
function create_each_block(ctx) {
	let span;
	let t_value = /*category*/ ctx[2] + "";
	let t;

	return {
		c() {
			span = element("span");
			t = text(t_value);
			attr(span, "class", "category");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t);
		},
		p(ctx, dirty) {
			if (dirty & /*recipe*/ 1 && t_value !== (t_value = /*category*/ ctx[2] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(span);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let t1;
	let current;
	let if_block = /*recipe*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			div0.innerHTML = `<a href="#/">‚Üê Back to recipe list</a>`;
			t1 = space();
			if (if_block) if_block.c();
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			append(div1, t1);
			if (if_block) if_block.m(div1, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*recipe*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*recipe*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div1, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if (if_block) if_block.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { name } = $$props;
	let recipe = null;

	on_mount(async () => {
		console.log('onMount called', name);
		$$invalidate(0, recipe = all_recipes.find(r => r.name == name));
		console.log(`Found: ${recipe}`);
	});

	$$self.$$set = $$props => {
		if ('name' in $$props) $$invalidate(1, name = $$props.name);
	};

	return [recipe, name];
}

class RecipeSingle extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { name: 1 });
	}
}

export default RecipeSingle;